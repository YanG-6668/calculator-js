{"version":3,"sources":["scripts/main.js"],"names":["numberButtons","document","querySelectorAll","operationButtons","equalsButton","querySelector","deleteButton","allClearButton","previousOperandTextElement","currentOperandTextElement","forEach","button","addEventListener","event","number","currentTarget","dataset","calculator","appendNumber","updateDisplay","operation","chooseOperation","compute","delete","clear","Calculator","currentOperand","previousOperand","undefined","toString","slice","includes","computation","prev","parseFloat","current","isNaN","stringNumber","integerDisplay","integerDigits","split","decimalDigits","toLocaleString","maximumFractionDigits","innerText","getDisplayNumber"],"mappings":"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","file":"main.e34d59e1.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst numberButtons = document.querySelectorAll('[data-number]');\nconst operationButtons = document.querySelectorAll('[data-operation]');\nconst equalsButton = document.querySelector('[data-equals]');\nconst deleteButton = document.querySelector('[data-delete]');\nconst allClearButton = document.querySelector('[data-all-clear]');\nconst previousOperandTextElement = document.querySelector('[data-previous-operand]');\nconst currentOperandTextElement = document.querySelector('[data-current-operand]');\n\nnumberButtons.forEach(button => {\n  button.addEventListener('click', event => {\n    const number = event.currentTarget.dataset.number;\n\n    calculator.appendNumber(number);\n    calculator.updateDisplay();\n  });\n});\n\noperationButtons.forEach(button => {\n  button.addEventListener('click', event => {\n    const operation = event.currentTarget.dataset.operation;\n\n    calculator.chooseOperation(operation);\n    calculator.updateDisplay();\n  });\n});\n\nequalsButton.addEventListener('click', () => {\n  calculator.compute();\n  calculator.updateDisplay();\n});\n\ndeleteButton.addEventListener('click', () => {\n  calculator.delete();\n  calculator.updateDisplay();\n});\n\nallClearButton.addEventListener('click', () => {\n  calculator.clear();\n  calculator.updateDisplay();\n});\n\nclass Calculator {\n  constructor(previousOperandTextElement, currentOperandTextElement) {\n    this.previousOperandTextElement = previousOperandTextElement;\n    this.currentOperandTextElement = currentOperandTextElement;\n    this.clear();\n  }\n\n  clear() {\n    this.currentOperand = '';\n    this.previousOperand = '';\n    this.operation = undefined;\n  }\n\n  delete() {\n    this.currentOperand = this.currentOperand.toString().slice(0, -1);\n  }\n\n  appendNumber(number) {\n    if (number === '.' && this.currentOperand.includes('.')) {\n      return;\n    }\n    this.currentOperand = this.currentOperand.toString() + number.toString();\n  }\n\n  chooseOperation(operation) {\n    if (this.currentOperand === '') {\n      return;\n    }\n\n    if (this.previousOperand !== '') {\n      this.compute();\n    }\n    this.operation = operation;\n    this.previousOperand = this.currentOperand;\n    this.currentOperand = '';\n  }\n\n  compute() {\n    let computation;\n    const prev = parseFloat(this.previousOperand);\n    const current = parseFloat(this.currentOperand);\n\n    if (isNaN(prev) || isNaN(current)) {\n      return;\n    }\n\n    switch (this.operation) {\n      case '+':\n        computation = prev + current;\n        break;\n\n      case '-':\n        computation = prev - current;\n        break;\n\n      case '*':\n        computation = prev * current;\n        break;\n\n      case '/':\n        computation = prev / current;\n        break;\n\n      case '%':\n        computation = prev * (current / 100);\n        break;\n\n      default:\n        return;\n    }\n    this.currentOperand = computation;\n    this.operation = undefined;\n    this.previousOperand = '';\n  }\n\n  getDisplayNumber(number) {\n    const stringNumber = number.toString();\n    const integerDigits = parseFloat(stringNumber.split('.')[0]);\n    const decimalDigits = stringNumber.split('.')[1];\n    let integerDisplay;\n\n    if (isNaN(integerDigits)) {\n      integerDisplay = '';\n    } else {\n      integerDisplay = integerDigits.toLocaleString('en', {\n        maximumFractionDigits: 0,\n      });\n    }\n\n    if (decimalDigits != null) {\n      return `${integerDisplay}.${decimalDigits}`;\n    } else {\n      return integerDisplay;\n    }\n  }\n\n  updateDisplay() {\n    this.currentOperandTextElement.innerText = this.getDisplayNumber(this.currentOperand);\n\n    if (this.operation != null) {\n      this.previousOperandTextElement.innerText = `${this.getDisplayNumber(this.previousOperand)} ${this.operation}`;\n    } else {\n      this.previousOperandTextElement.innerText = '';\n    }\n  }\n}\n\nconst calculator = new Calculator(previousOperandTextElement, currentOperandTextElement);\n"]}